import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id 'java'
    alias(libs.plugins.enonic.defaults)
    alias(libs.plugins.enonic.xp.base)
    alias(libs.plugins.node.gradle)
}

apply from: "$rootDir/gradle/node.gradle"

group = 'com.enonic.xp.js_testing'

repositories {
    mavenCentral()
    xp.enonicRepo( 'dev' )
}

configurations {
    distro
    apps {
        transitive false
    }
}

def unpackDir = layout.buildDirectory.dir("install").get()
def distroDir = unpackDir.dir("enonic-xp-generic-$xpVersion")
def deployDir = distroDir.dir("home/deploy")
def appDir = "$projectDir/test-applications"
def xpHome = "$distroDir/home"
def configDir = "$xpHome/config"
def appName = "app-applications"
def appFile = "$distroDir/system/40/${appName}-${version}.jar"
def appUrl = project.hasProperty( 'appUrl' ) ? appUrl : "file:///$projectDir/../build/libs/${appName}.jar"

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$xpVersion@tgz"
    apps "com.enonic.uitest:auth0-idprovider:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:adfs-idprovider:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:simple-page:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:test-application:1.0.0-SNAPSHOT"
    apps "com.enonic.uitest:myfirstapp:1.0.0-SNAPSHOT"
}

tasks.register( 'unpackDistro', Copy ) {
    description = 'Unpacks the XP distribution for testing'
    group = 'Test Setup'

    from {
        configurations.distro.collect { tarTree( it ) }
    }
    into unpackDir
}

tasks.register('copyConfig', Copy) {
    description = 'Copy common configuration files'
    group = 'setup'

    from "$appDir/common-config"
    include '**.*.cfg'
    include '*.properties'
    into file(configDir)
    mustRunAfter tasks.named( 'unpackDistro' )
}

tasks.register('downloadApps', Copy) {
    description = 'Download test applications'
    group = 'setup'

    from {
        configurations.apps
    }
    into deployDir
    mustRunAfter tasks.named( 'unpackDistro' )
}

tasks.register('deployApp', DefaultTask) {
    description = 'Deploy the main application'
    group = 'setup'

    outputs.files( appFile )
    outputs.upToDateWhen { false }
    doLast {
        def f = new File(appFile as String)
        println "Deleting  ${appFile}. Exists ${f.exists()}"

        f.delete()

        println "Copying from ${appUrl} to ${appFile}"
        new URL(appUrl as String).withInputStream { i -> f.withOutputStream { it << i } }
    }
    mustRunAfter tasks.named( 'unpackDistro' )
}

def process
tasks.register('startServer' ) {
    description = 'Start XP server'
    group = 'server'

    dependsOn tasks.named( 'unpackDistro' )
    doLast {
        def pb
        if (DefaultNativePlatform.getCurrentOperatingSystem().windows) {
            pb = new ProcessBuilder('cmd', '/c', "${distroDir}\\bin\\server.bat")
        }
        else {
            pb = new ProcessBuilder("${distroDir}/bin/server.sh")
        }
        Map<String, String> env = pb.environment()
        env.put("XP_HOME", "${xpHome}".toString())

        def logsPath = layout.buildDirectory.dir("reports/logs").get()
        mkdir logsPath.asFile
        pb.redirectOutput(logsPath.file("xp.log").asFile)
        pb.redirectErrorStream(true)
        process = pb.start()
        sleep(60 * 1000)
    }
}

tasks.register('stopServer' ) {
    description = 'Stop XP server'
    group = 'server'
    doLast {
        if (DefaultNativePlatform.getCurrentOperatingSystem().windows) {
            Runtime.getRuntime().exec("taskkill /F /T /PID " + process.pid());
        } else {
            process.destroy()
        }
    }
}

tasks.register('cleanup', Delete) {
    description = 'Clean up test reports'
    group = 'verification'

    delete './build/reports/allure'
}

tasks.register('generateReportAndStopServer', PnpmTask) {
    description = 'Generate test report and stop server'
    group = 'verification'

    args = ['run-script', 'allure-report']
    finalizedBy tasks.named( 'cleanup' )
    finalizedBy tasks.named( 'stopServer' )
}

tasks.register('testAppFirefox', PnpmTask) {
    description = 'Run application tests in Firefox'
    group = 'verification'

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    args = ['run-script', 'test:firefox']
    finalizedBy tasks.named( 'generateReportAndStopServer' )
}

tasks.register('w_testAppChrome', PnpmTask) {
    description = 'Run application tests in Chrome'
    group = 'verification'

    dependsOn tasks.named( 'pnpmInstall' )
    dependsOn tasks.named( 'unpackDistro' )
    dependsOn tasks.named( 'copyConfig' )
    dependsOn tasks.named( 'downloadApps' )
    dependsOn tasks.named( 'deployApp' )
    dependsOn tasks.named( 'startServer' )
    args = ['run-script', 'test_apps:wdio_chrome']
    finalizedBy tasks.named( 'generateReportAndStopServer' )
}

tasks.register('w_testAppChromeLocal', PnpmTask) {
    description = 'Run application tests in Chrome locally'
    group = 'verification'

    dependsOn tasks.named( 'pnpmInstall' )
    args = ['run-script', 'test_apps:wdio_chrome']
}
