import com.enonic.uitest.server.ServerInstance

plugins {
    id 'java'
    id 'com.enonic.defaults'
    id 'com.enonic.xp.base'
    id 'com.github.node-gradle.node'
}
group = 'com.enonic.xp.js_testing'

repositories {
    mavenCentral()
    xp.enonicRepo( 'dev' )
}

configurations {
    distro
}

ext {
    unpackDir = "$buildDir/install"
    distroDir = "$unpackDir/enonic-xp-generic-$version"
    deployDir = "$distroDir/home/deploy"
    appDir = "$projectDir/test-applications"
    xpHome = "$distroDir/home"
    configDir = "$xpHome/config"
    xpServer = new ServerInstance()
    appName = "app-applications"
    appFile = "$distroDir/system/40/${appName}-${version}.jar"
    appUrl = project.hasProperty( 'appUrl' ) ? appUrl : "file:///$projectDir/../build/libs/${appName}.jar"
}

dependencies {
    distro "com.enonic.xp:enonic-xp-generic:$version@zip"
}

task unpackDistro( type: Copy ) {
    from {
        configurations.distro.collect { zipTree( it ) }
    }
    into file( unpackDir )
}

task copyConfig( type: Copy ) {
    println "$appDir/common-config"
    from "$appDir/common-config"
    include '**.*.cfg'
    include '*.properties'
    into file( configDir )
    mustRunAfter unpackDistro
}

task copyApps( type: Copy ) {
    println appDir
    from file( appDir )
    include '*.jar'
    into file( deployDir )
    mustRunAfter unpackDistro
}

task deployApp( type: DefaultTask ) {
    outputs.files( appFile )
    outputs.upToDateWhen { false }
    doLast {
        def f = new File( appFile )
        println "Deleting  ${appFile}. Exists ${f.exists()}"

        f.delete()

        println "Copying from ${appUrl} to ${appFile}"
        new URL( appUrl ).withInputStream { i -> f.withOutputStream { it << i } }
    }
    mustRunAfter unpackDistro
}

task startServer( dependsOn: unpackDistro ) {
    doLast {
        xpServer.installDir = file( distroDir )
        xpServer.start()
    }
}

task stopServer {
    doLast {
        xpServer.stop()
    }
}

task cleanup(type: Delete) {
    delete './build/reports/allure'
}

task generateReportAndStopServer( type: NpmTask ) {
    args = ['run-script', 'allure-report']
    finalizedBy cleanup
    finalizedBy stopServer
}


task testAppFirefox( type: NpmTask,
                                 dependsOn: [npmInstall, unpackDistro, copyConfig, copyApps, deployApp, startServer] ) {
    args = ['run-script', 'test:firefox']
    finalizedBy generateReportAndStopServer
}

task w_testAppChrome( type: NpmTask,
                    dependsOn: [npmInstall, unpackDistro, copyConfig, copyApps, deployApp, startServer] ) {
    args = ['run-script', 'test_apps:wdio_chrome']
    finalizedBy generateReportAndStopServer
}
task w_testAppChromeLocal( type: NpmTask, dependsOn: [npmInstall] ) {
    args = ['run-script', 'test_apps:wdio_chrome']
}


