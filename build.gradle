plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    alias(libs.plugins.enonic.defaults)
    alias(libs.plugins.enonic.xp.app)
    alias(libs.plugins.node.gradle)
}

app {
    name = "${group}.${projectName}"
    displayName = 'Applications'
    systemApp = true
    systemVersion = "${xpVersion}"
    devSourcePaths += file( "$rootDir/../lib-admin-ui/src/main/resources" )
}

configurations {
    devResources {
        attributes {
            attribute( LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named( LibraryElements, 'dev-resources' ) )
        }
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }

    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = sourceCompatibility
}

repositories {
    mavenLocal()
    xp.enonicRepo('dev')
    mavenCentral()
}

apply from: "$projectDir/gradle/env.gradle"
apply from: "$projectDir/gradle/node.gradle"
apply from: "$projectDir/gradle/lib-admin.gradle"

dependencies {
    implementation "com.enonic.xp:admin-api:${xpVersion}"
    implementation "com.enonic.xp:jaxrs-api:${xpVersion}"
    implementation "com.enonic.xp:portal-api:${xpVersion}"
    include "com.enonic.xp:lib-admin:${xpVersion}"
    include "com.enonic.xp:lib-i18n:${xpVersion}"
    include "com.enonic.xp:lib-portal:${xpVersion}"
    include libs.lib.asset
    include libs.lib.mustache

    include "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"
    devResources "com.enonic.lib:lib-admin-ui:${libAdminUiVersion}"

    testImplementation platform(libs.junit.bom)
    testImplementation platform(libs.mockito.bom)
    testImplementation libs.junit.jupiter
    testImplementation libs.mockito.jupiter
    testImplementation testFixtures( "com.enonic.xp:jaxrs-impl:${xpVersion}" )
    testImplementation testFixtures( "com.enonic.xp:core-app:${xpVersion}" )
    testRuntimeOnly libs.junit.launcher
}

tasks.register('lint', PnpmTask ) {
    group "verification"
    dependsOn( 'pnpmInstall' )
    args = ['run', 'lint']
    outputs.upToDateWhen { false }
}

check.configure {
    dependsOn( 'lint' )
}

tasks.register('webpack', PnpmTask ) {
    dependsOn( 'pnpmInstall' )
    environment = ['NODE_ENV': nodeEnvironment()]
    description = 'Build UI resources (ts, css, etc).'
    args = ['run', 'build']
    inputs.dir '.xp/dev'
    inputs.dir 'src/main/resources/assets'
    inputs.file 'webpack.config.js'
}

jar {
    dependsOn += webpack
}

processResources {
    exclude 'assets/**'
}

test {
    useJUnitPlatform()
    systemProperty 'java.awt.headless', 'true'
    jvmArgs '-XX:TieredStopAtLevel=1'
}

jacocoTestReport {
    reports {
        xml.required = true
        html.required = true
    }
    mustRunAfter jar
}

check.dependsOn jacocoTestReport
